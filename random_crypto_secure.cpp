#include <iostream>
#include <cryptopp/integer.h>
#include <cryptopp/osrng.h>

using namespace CryptoPP;
using namespace std;

Integer generateCryptoSecureRandomInteger(int n) 
{
    /* n - number of bits of the generated number */


    // Make sure that n > 0
    if (n <= 0) 
    {
        cerr << "Cannot generate number with negative bits!" <<endl;
        return Integer::Zero();
    }

    // Generate random bytes
    AutoSeededRandomPool rng;
    SecByteBlock bytes(n / 8 + 1);
    rng.GenerateBlock(bytes, bytes.size());

    // From the generated bytes get an integer
    Integer result;
    result.Decode(bytes.BytePtr(), bytes.size());

    // Truncate if necessary
    result >>= (result.BitCount() - n); 

    return result;
}

int main() 
{
    int n = 1; 
    Integer randomNumber = generateCryptoSecureRandomInteger(n);
    cout << "Random between (2^" << n-1 << " - 1) and (2^" << n << " - 1): " << endl;

    cout << randomNumber << endl;

    //cout<<randomNumber + 1 <<endl;
    return 0;
}
